@import url('https://fonts.googleapis.com/css2?family=Lato:wght@300&display=swap');

/* uses root scope. allows us to use any of the custom properties anywhere in the stylesheet
this is used when there is repeated styling  */
:root {
    --primary-color: #047aed;
}

/* asterisk is the universal selector - all elements */
* {
    /* allows us to add padding, border, etc w/o adding to the width of the element */
    box-sizing: border-box;
    /* set margin and padding to be 0 because there is default margin and padding for elements in the browser */
    padding: 0;
    margin: 0;
}

body {
    font-family: 'Lato', sans-serif;
    color: #333;
    line-height: 1.6;
}

ul {
    list-style-type: none;
}

a {
    text-decoration: none;
    color: #333;
}

h1, h2 {
    font-weight: 300;
    line-height: 1.2;
    margin: 10px 0;
}

p {
    margin: 10px 0;
}

img {
    /* width: 100% will keep the images within its container and it'll fill up the width by 100% */
    width: 100%;
}

/* Navbar styling */

.navbar {
    background-color: var(--primary-color);
    color: #fff;
    height: 70px;
}

/* turns ul items into flex elements */
.navbar ul {
    display: flex;
}

/* gives spacing around and between the links */
.navbar a {
    color: #fff;
    padding: 10px;
    margin: 0 5px;
}

.navbar a:hover {
    border-bottom: 2px #fff solid;
}

/* the flex class that was created will be reused by other elements, so within the navbar, we want to use
justify-content: space-between instead of center */
/* so if flex is in the navbar, then we'll have space-between instead of center */
.navbar .flex {
    justify-content: space-between;
}


/* Showcase */

.showcase {
    height: 400px;
    background-color: var(--primary-color);
    color: #fff;
    /* if we need to position anything absolute within it, we can */
    position: relative;
}

.showcase h1 {
    font-size: 40px;
}

/* initial p styling was margin 10px 0, but for showcase, we want 20px 0 */
.showcase p {
    margin: 20px 0;
}

.showcase .grid {
    /* visible will make the element go past the border */
    overflow: visible;
    /* this makes the right side slightly wider than the left side */
    grid-template-columns: 55% 45%;
    gap: 30px;
}

.showcase-form {
    position: relative;
    top: 60px;
    height: 350px;
    width: 400px;
    padding: 40px;
    z-index: 100;
}

.showcase-form .form-control {
    margin: 30px 0;
}

.showcase-form input[type='text'],
.showcase-form input[type='email'] {
    border: 0;
    border-bottom: 1px solid #b4becb;
    width: 100%;
    padding: 3px;
    font-size: 16px;
}

.showcase-form input:focus {
    /* removes the outline around the input when the input is clicked on */
    outline: none;
}


/* Utilities (classes that will be used throughout the whole website */

.container {
    max-width: 1100px;
    /* margin 0 auto puts everything in the container in the middle, so 
     the navbar will stay in its place when the screen is past 1100px */
    margin: 0 auto;
    /* prior to overflow, there is a space between the top of the screen and the navbar because of 
    the margin-top 10px in h1,h2, so to fix it, we use overflow auto */
    overflow: auto;
    /* now even if the screen is smaller than 1100px, we can give the navbar space between the sides of the screen */
    padding: 0 40px;
}

.card {
    background-color: #fff;
    color: #333;
    border-radius: 10px;
    /* gives a little shadow to the box */
    box-shadow: 0 3px 10px rgba(0, 0, 0, 0.2);
    padding: 20px;
    margin: 10px;
}

.flex {
    /* turns h1 logo and navbar into flex elements arranged in a ROW (default)*/
    display: flex;
    /* moves everything to the center on the main axis (x-axis) */
    /* justify-content is along the PRIMARY/MAIN axis */
    justify-content: center;
    /* moves everything to the center on the secondary axis (y-axis) */
    /* align-items is along the SECONDARY axis */
    align-items: center;
    /* align-items is different from align-content in that align-content is for multi-line flex-box NOT items on a single-line */
    
    /* makes sure everything is 100% in height of the container */
    height: 100%;
}

.grid {
    display: grid;
    /* there are two main divs within the grid container, so 300px will target the first div and 200px will target the second div */
    /* grid-template-columns: 300px 200px; */
    /* repeat means repeat the specified style. the 2 means repeat twice (2 divs) for 1fr */
    grid-template-columns: repeat(2, 1fr);
    /* space between the two divs */
    gap: 20px;
    justify-content: center;
    align-items: center;
    /* without height, align-items won't work */
    height: 100%;
}