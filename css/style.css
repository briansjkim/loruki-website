@import url('https://fonts.googleapis.com/css2?family=Lato:wght@300&display=swap');

/* uses root scope. allows us to use any of the custom properties anywhere in the stylesheet
this is used when there is repeated styling  */
:root {
    --primary-color: #047aed;
}

/* asterisk is the universal selector - all elements */
* {
    /* allows us to add padding, border, etc w/o adding to the width of the element */
    box-sizing: border-box;
    /* set margin and padding to be 0 because there is default margin and padding for elements in the browser */
    padding: 0;
    margin: 0;
}

body {
    font-family: 'Lato', sans-serif;
    color: #333;
    line-height: 1.6;
}

ul {
    list-style-type: none;
}

a {
    text-decoration: none;
    color: #333;
}

h1, h2 {
    font-weight: 300;
    line-height: 1.2;
    margin: 10px 0;
}

p {
    margin: 10px 0;
}

img {
    /* width: 100% will keep the images within its container and it'll fill up the width by 100% */
    width: 100%;
}

/* Navbar styling */

.navbar {
    background-color: var(--primary-color);
    color: #fff;
    height: 70px;
}

/* turns ul items into flex elements */
.navbar ul {
    display: flex;
}

/* gives spacing around and between the links */
.navbar a {
    color: #fff;
    padding: 10px;
    margin: 0 5px;
}

.navbar a:hover {
    border-bottom: 2px #fff solid;
}

/* the flex class that was created will be reused by other elements, so within the navbar, we want to use
justify-content: space-between instead of center */
/* so if flex is in the navbar, then we'll have space-between instead of center */
.navbar .flex {
    justify-content: space-between;
}


/* Showcase */

.showcase {
    height: 400px;
    background-color: var(--primary-color);
    color: #fff;
    /* if we need to position anything absolute within it, we can */
    position: relative;
}

.showcase h1 {
    font-size: 40px;
}

/* initial p styling was margin 10px 0, but for showcase, we want 20px 0 */
.showcase p {
    margin: 20px 0;
}

.showcase .grid {
    /* visible will make the element go past the border */
    overflow: visible;
    /* this makes the right side slightly wider than the left side */
    grid-template-columns: 55% 45%;
    gap: 30px;
}

.showcase-form {
    position: relative;
    top: 60px;
    height: 350px;
    width: 400px;
    padding: 40px;
    z-index: 100;
}

.showcase-form .form-control {
    margin: 30px 0;
}

.showcase-form input[type='text'],
.showcase-form input[type='email'] {
    border: 0;
    border-bottom: 1px solid #b4becb;
    width: 100%;
    padding: 3px;
    font-size: 16px;
}

.showcase-form input:focus {
    /* removes the outline around the input when the input is clicked on */
    outline: none;
}

.showcase::before,
.showcase::after {
    content: '';
    position: absolute;
    height: 100px;
    bottom: -70px;
    right: 0;
    left: 0;
    background: #fff;
    transform: skewY(-3deg);
    /* webkit is for safari and chrome */
    -webkit-transform: skewY(-2deg);
    /* moz is for mozille */
    -moz-transform: skewY(-2deg);
    /* ms is for microsoft (IE, Edge) */
    -ms-transform: skewY(-2deg);
}

/* Stats */
.stats {
    padding-top: 100px;
}

.stats-heading {
    max-width: 500px;
    margin: 0 auto;
}

.stats .grid h3 {
    font-size: 35px;
}

.stats .grid p {
    font-size: 20px;
    font-weight: bold;
}

/* CLI */
.cli .grid {
    grid-template-columns: repeat(3, 1fr);
    grid-template-rows: repeat(2, 1fr);
}
/* this will target the first child within the element that has the class .cli and .grid */
/* could hard code to target the first child, but this is the dynamic way to do it */
.cli .grid > *:first-child {
    /* the first child will span across the grid from column line 1 to 2  */
    grid-column: 1 / span 2;
    /* now the first child will span from row line 1 to 2 */
    grid-row: 1 / span 2;
}